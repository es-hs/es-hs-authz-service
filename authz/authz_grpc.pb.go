// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthzRPCClient is the client API for AuthzRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthzRPCClient interface {
	CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResult, error)
	AddRoleToDomain(ctx context.Context, in *AddRoleToDomainRequest, opts ...grpc.CallOption) (*AddRoleToDomainResult, error)
	GetRolesInDomain(ctx context.Context, in *GetRolesInDomainRequest, opts ...grpc.CallOption) (*GetRolesInDomainResult, error)
	GetImplicitRolesInDomain(ctx context.Context, in *GetImplicitRolesInDomainRequest, opts ...grpc.CallOption) (*GetImplicitRolesInDomainResult, error)
	GenerateOwnerRole(ctx context.Context, in *GenerateOwnerRoleRequest, opts ...grpc.CallOption) (*GenerateOwnerRoleResult, error)
}

type authzRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthzRPCClient(cc grpc.ClientConnInterface) AuthzRPCClient {
	return &authzRPCClient{cc}
}

func (c *authzRPCClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResult, error) {
	out := new(CheckPermissionResult)
	err := c.cc.Invoke(ctx, "/authz.AuthzRPC/CheckPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzRPCClient) AddRoleToDomain(ctx context.Context, in *AddRoleToDomainRequest, opts ...grpc.CallOption) (*AddRoleToDomainResult, error) {
	out := new(AddRoleToDomainResult)
	err := c.cc.Invoke(ctx, "/authz.AuthzRPC/AddRoleToDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzRPCClient) GetRolesInDomain(ctx context.Context, in *GetRolesInDomainRequest, opts ...grpc.CallOption) (*GetRolesInDomainResult, error) {
	out := new(GetRolesInDomainResult)
	err := c.cc.Invoke(ctx, "/authz.AuthzRPC/GetRolesInDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzRPCClient) GetImplicitRolesInDomain(ctx context.Context, in *GetImplicitRolesInDomainRequest, opts ...grpc.CallOption) (*GetImplicitRolesInDomainResult, error) {
	out := new(GetImplicitRolesInDomainResult)
	err := c.cc.Invoke(ctx, "/authz.AuthzRPC/GetImplicitRolesInDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authzRPCClient) GenerateOwnerRole(ctx context.Context, in *GenerateOwnerRoleRequest, opts ...grpc.CallOption) (*GenerateOwnerRoleResult, error) {
	out := new(GenerateOwnerRoleResult)
	err := c.cc.Invoke(ctx, "/authz.AuthzRPC/GenerateOwnerRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthzRPCServer is the server API for AuthzRPC service.
// All implementations must embed UnimplementedAuthzRPCServer
// for forward compatibility
type AuthzRPCServer interface {
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResult, error)
	AddRoleToDomain(context.Context, *AddRoleToDomainRequest) (*AddRoleToDomainResult, error)
	GetRolesInDomain(context.Context, *GetRolesInDomainRequest) (*GetRolesInDomainResult, error)
	GetImplicitRolesInDomain(context.Context, *GetImplicitRolesInDomainRequest) (*GetImplicitRolesInDomainResult, error)
	GenerateOwnerRole(context.Context, *GenerateOwnerRoleRequest) (*GenerateOwnerRoleResult, error)
	mustEmbedUnimplementedAuthzRPCServer()
}

// UnimplementedAuthzRPCServer must be embedded to have forward compatible implementations.
type UnimplementedAuthzRPCServer struct {
}

func (UnimplementedAuthzRPCServer) CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedAuthzRPCServer) AddRoleToDomain(context.Context, *AddRoleToDomainRequest) (*AddRoleToDomainResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleToDomain not implemented")
}
func (UnimplementedAuthzRPCServer) GetRolesInDomain(context.Context, *GetRolesInDomainRequest) (*GetRolesInDomainResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesInDomain not implemented")
}
func (UnimplementedAuthzRPCServer) GetImplicitRolesInDomain(context.Context, *GetImplicitRolesInDomainRequest) (*GetImplicitRolesInDomainResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImplicitRolesInDomain not implemented")
}
func (UnimplementedAuthzRPCServer) GenerateOwnerRole(context.Context, *GenerateOwnerRoleRequest) (*GenerateOwnerRoleResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOwnerRole not implemented")
}
func (UnimplementedAuthzRPCServer) mustEmbedUnimplementedAuthzRPCServer() {}

// UnsafeAuthzRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthzRPCServer will
// result in compilation errors.
type UnsafeAuthzRPCServer interface {
	mustEmbedUnimplementedAuthzRPCServer()
}

func RegisterAuthzRPCServer(s grpc.ServiceRegistrar, srv AuthzRPCServer) {
	s.RegisterService(&AuthzRPC_ServiceDesc, srv)
}

func _AuthzRPC_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzRPCServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authz.AuthzRPC/CheckPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzRPCServer).CheckPermission(ctx, req.(*CheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzRPC_AddRoleToDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleToDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzRPCServer).AddRoleToDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authz.AuthzRPC/AddRoleToDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzRPCServer).AddRoleToDomain(ctx, req.(*AddRoleToDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzRPC_GetRolesInDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesInDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzRPCServer).GetRolesInDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authz.AuthzRPC/GetRolesInDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzRPCServer).GetRolesInDomain(ctx, req.(*GetRolesInDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzRPC_GetImplicitRolesInDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImplicitRolesInDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzRPCServer).GetImplicitRolesInDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authz.AuthzRPC/GetImplicitRolesInDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzRPCServer).GetImplicitRolesInDomain(ctx, req.(*GetImplicitRolesInDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthzRPC_GenerateOwnerRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOwnerRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthzRPCServer).GenerateOwnerRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authz.AuthzRPC/GenerateOwnerRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthzRPCServer).GenerateOwnerRole(ctx, req.(*GenerateOwnerRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthzRPC_ServiceDesc is the grpc.ServiceDesc for AuthzRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthzRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authz.AuthzRPC",
	HandlerType: (*AuthzRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPermission",
			Handler:    _AuthzRPC_CheckPermission_Handler,
		},
		{
			MethodName: "AddRoleToDomain",
			Handler:    _AuthzRPC_AddRoleToDomain_Handler,
		},
		{
			MethodName: "GetRolesInDomain",
			Handler:    _AuthzRPC_GetRolesInDomain_Handler,
		},
		{
			MethodName: "GetImplicitRolesInDomain",
			Handler:    _AuthzRPC_GetImplicitRolesInDomain_Handler,
		},
		{
			MethodName: "GenerateOwnerRole",
			Handler:    _AuthzRPC_GenerateOwnerRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authz/authz.proto",
}
